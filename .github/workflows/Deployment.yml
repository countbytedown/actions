name: Handle Deployment Request

on:
  issues:
    types: [opened, edited, closed]

jobs:
  filter:
    if: ${{ contains(join(github.event.issue.labels.*.name, ','), 'Deployment Request') }}
   # if: github.event_name == 'issues' && github.event.action == 'labeled' && github.event.label.name == 'approved'
    runs-on: ubuntu-latest
    concurrency:
      group: deployment-request
      cancel-in-progress: true
    steps:
      - name: Label Check
        run: |
          echo "Deployment Request"
  validate:
    if: ${{ contains(join(github.event.issue.labels.*.name, ','), 'invalid')  }}  
    permissions:
        issues: write
    runs-on: ubuntu-latest
    needs: filter
    concurrency:
      group: deployment-request
      cancel-in-progress: true
    steps:
        - name: AWK Extraction
          run: |
              ENVIRONMENT=$(awk '/### Target Deployment Environment/{getline; getline; print; exit}' <<< "${{ github.event.issue.body }}")
              echo "Extracted environment: $ENVIRONMENT"
              echo "ENVIRONMENT=$ENVIRONMENT" >> $GITHUB_ENV  
              TARGET=$(awk '/### Target Repository Reference/{getline; getline; print; exit}' <<< "${{ github.event.issue.body }}")
              echo "Extracted target: $TARGET"
              echo "TARGET=$TARGET" >> $GITHUB_ENV        
              REFERENCE=$(awk '/### Reference Value/{getline; getline; print; exit}' <<< "${{ github.event.issue.body }}")
              echo "Extracted reference: $REFERENCE"
              echo "REFERENCE=$REFERENCE" >> $GITHUB_ENV  # Setting an environment variable
        - name: Dump GitHub context
          env:
            GITHUB_CONTEXT: ${{ toJson(github.event.issue ) }}
          run: |
            echo "$GITHUB_CONTEXT" | jq .
        - name: Checkout code
          uses: actions/checkout@v4 
          with:
            ref: ${{ env.REFERENCE }}
            fetch-tags: true
        - name: Remove label from issue
          uses: actions/github-script@v7
          continue-on-error: true
          with:
            script: |
              const issueNumber = context.issue.number;
              await github.rest.issues.removeLabel({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issueNumber,
                name: 'invalid'
              });
        - name: Add label to issue
          uses: actions/github-script@v7
          with:              
            script: |
              const issueNumber = context.issue.number;
              await github.rest.issues.addLabels({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issueNumber,
                labels: ['valid']
              });
  deploy:
    needs: validate
    if: github.event_name == 'issues' && github.event.action == 'closed' && contains(join(github.event.issue.labels.*.name, ','), 'Deployment Request')
    permissions:
        issues: write
    runs-on: ubuntu-latest
    concurrency:
      group: deployment-request
      cancel-in-progress: true
    steps:
        - name: Generate Container Tag
          run: |
              TAGS=()
              TAG_NAME=$(git describe --tags --exact-match 2> /dev/null || echo "")
              if [ -n "$TAG_NAME" ]; then
              TAGS+=("$TAG_NAME")
              fi
              # PACKAGE_VERSION=$(jq -r '.version' ./package.json)
              # if [ -n "$PACKAGE_VERSION" ]; then
              #     TAGS+=("$PACKAGE_VERSION")
              # fi
              COMMIT_HASH=$(git rev-parse --short HEAD)
              TAGS+=("$COMMIT_HASH")
              TAGS_STR=$(IFS=, ; echo "${TAGS[*]}")
              echo "Collected tags: $TAGS_STR"
              echo "TAGS=$TAGS_STR" >> $GITHUB_ENV
